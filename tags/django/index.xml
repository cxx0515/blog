<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Django on 诗与胡说</title>
    <link>https://kylingit.com/tags/django/index.xml</link>
    <description>Recent content in Django on 诗与胡说</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_cn</language>
    <copyright>Copyright © 2018 kylinking</copyright>
    <atom:link href="https://kylingit.com/tags/django/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Django框架防止目录穿越——从路由传参说起</title>
      <link>https://kylingit.com/blog/django%E6%A1%86%E6%9E%B6%E9%98%B2%E6%AD%A2%E7%9B%AE%E5%BD%95%E7%A9%BF%E8%B6%8A%E4%BB%8E%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82%E8%AF%B4%E8%B5%B7/</link>
      <pubDate>Wed, 16 May 2018 10:59:02 +0000</pubDate>
      
      <guid>https://kylingit.com/blog/django%E6%A1%86%E6%9E%B6%E9%98%B2%E6%AD%A2%E7%9B%AE%E5%BD%95%E7%A9%BF%E8%B6%8A%E4%BB%8E%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82%E8%AF%B4%E8%B5%B7/</guid>
      <description>

&lt;script src=&#34;https://blog-1252261399.cos-website.ap-beijing.myqcloud.com/pangu.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;最近审计代码过程中出现了没有正确处理url形成目录穿越，导致可以读取或下载任意文件的案例，过程很简单，由此却引发了和小伙伴的讨论，对风险的控制需要依赖框架本身还是必须从根本上规避风险点。下面就通过目录遍历漏洞的案例分析一下django的路由传参方式，以及在日常开发中如何避免此类风险。&lt;/p&gt;

&lt;h3 id=&#34;0x01-示例代码&#34;&gt;0x01 示例代码&lt;/h3&gt;

&lt;p&gt;我们写一个简单的views，用来实现文件下载功能，代码如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os

from django.http import HttpResponseNotFound, HttpResponse

# Create your views here.
def file_download(request, filename):
    path = &#39;/tmp/test/2&#39;
    full_path = os.path.join(path, filename)
    if not os.path.exists(full_path):
        return HttpResponseNotFound(&#39;&amp;lt;h1&amp;gt;file not found&amp;lt;/h1&amp;gt;&#39;)
    else:
        response = HttpResponse(read_file(full_path))
        response[&#39;Content-Type&#39;] = &#39;application/octet-stream&#39;
        response[&#39;Content-Length&#39;] = os.path.getsize(full_path)
        response[&#39;Content-Disposition&#39;] = &#39;attachment; filename=%s&#39; % filename
        response[&#39;Accept-Ranges&#39;] = &#39;bytes&#39;
        return response

def read_file(filename, bufsize=8192):
    try:
        with open(filename, &#39;rb&#39;) as f:
            while True:
                content = f.read(bufsize)
                if content:
                    yield content
                else:
                    break
    except Exception as e:
        print(e.message)
        print(&#39;read error&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代码很简单，就不过多解释了，目的是提供&lt;code&gt;/tmp/test/2/&lt;/code&gt;目录下的文件下载。&lt;code&gt;read_file()&lt;/code&gt;使用了切片避免文件过大造成拒绝服务风险。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/tmp/test/&lt;/code&gt;结构如下，内容分别为1,2&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;test
├── 1
│   └── 1.txt
└── 2
    └── 2.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有经验的同学马上就能看出&lt;code&gt;file_download()&lt;/code&gt;对传入的文件名并没有任何限制，只是做了文件是否存在的判断，也就是说我们可以传入&lt;code&gt;/../1/1.txt&lt;/code&gt;的文件名，&lt;code&gt;full_path&lt;/code&gt;经过拼接就会成为&lt;code&gt;/tmp/test/2/../../1/1.txt&lt;/code&gt;，传入&lt;code&gt;read_file()&lt;/code&gt;就能够读取到1.txt&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-1252261399.cos-website.ap-beijing.myqcloud.com/images/JUIFX&#34; alt=&#34;1.txt&#34; /&gt;
类似的，如果我们传入&lt;code&gt;../../../etc/passwd&lt;/code&gt;就能下载到敏感文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-1252261399.cos-website.ap-beijing.myqcloud.com/images/h0bP3&#34; alt=&#34;passwd&#34; /&gt;&lt;/p&gt;

&lt;p&gt;可是事实上每次都是如此吗？&lt;/p&gt;

&lt;p&gt;其实这跟我们如何处理传入的url有关，也就是Django对于url路由的处理。&lt;/p&gt;

&lt;h3 id=&#34;0x02-测试&#34;&gt;0x02 测试&lt;/h3&gt;

&lt;p&gt;在刚才的示例中，我们在&lt;code&gt;urls.py&lt;/code&gt;中是这样定义路由的&lt;/p&gt;

&lt;p&gt;&lt;code&gt;url(r&#39;^download/(.+)$&#39;, &amp;quot;mysite.views.file_download&amp;quot;),&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;相信这也是很多同学会采用的写法，匹配任意文件名使得可以下载&lt;code&gt;/tmp/test/2&lt;/code&gt;中的任意文件，认为在views里面限定了目录，只能读取到该文件夹下的内容，忽略了用户可以输入&lt;code&gt;../&lt;/code&gt;进行目录穿越，而在接收文件名的时候却没有对参数进行任何过滤，这样就会导致一个任意文件读取的漏洞。&lt;/p&gt;

&lt;p&gt;在django2.0中，url路由部分由&lt;code&gt;path&lt;/code&gt;代替&lt;code&gt;url&lt;/code&gt;，即原来的&lt;/p&gt;

&lt;p&gt;&lt;code&gt;url(r&#39;^articles/(?P&amp;lt;year&amp;gt;[0-9]{4})/$&#39;, views.year_archive),&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;新语法&lt;/p&gt;

&lt;p&gt;&lt;code&gt;path(&#39;articles/&amp;lt;int:year&amp;gt;/&#39;, views.year_archive),&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;新语法支持url参数的类型转化。这里的year_archive函数接收到的year参数作为参数，并且会自动转换year为整型而不是字符串。&lt;/p&gt;

&lt;p&gt;这里的int称为路径转换器，&lt;a href=&#34;https://docs.djangoproject.com/en/2.0/topics/http/urls/#path-converters&#34;&gt;Path converters&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;默认情况下，Django内置下面的路径转换器:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;str - &lt;strong&gt;Matches any non-empty string, excluding the path separator, &amp;lsquo;/&amp;rsquo;.&lt;/strong&gt; This is the &lt;strong&gt;default&lt;/strong&gt; if a converter isn’t included in the expression.&lt;/li&gt;
&lt;li&gt;int - Matches zero or any positive integer. Returns an int.&lt;/li&gt;
&lt;li&gt;slug - Matches any slug string consisting of ASCII letters or numbers, plus the hyphen and underscore characters. For example, building-your-1st-django-site.&lt;/li&gt;
&lt;li&gt;uuid - Matches a formatted UUID. To prevent multiple URLs from mapping to the same page, dashes must be included and letters must be lowercase. For example, 075194d3-6885-417e-a8a8-6c931e272f00. Returns a UUID instance.&lt;/li&gt;
&lt;li&gt;path - &lt;strong&gt;Matches any non-empty string, including the path separator, &amp;lsquo;/&amp;rsquo;.&lt;/strong&gt; This allows you to match against a complete URL path rather than just a segment of a URL path as with str.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们重点关注一下&lt;code&gt;str&lt;/code&gt;和&lt;code&gt;path&lt;/code&gt;的区别，也就是&lt;/p&gt;

&lt;p&gt;&lt;code&gt;path(&#39;download/&amp;lt;str:filename&amp;gt;&#39;, views.file_download),&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;和&lt;/p&gt;

&lt;p&gt;&lt;code&gt;path(&#39;download/&amp;lt;path:filename&amp;gt;&#39;, views.file_download),&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;有什么不一样。&lt;/p&gt;

&lt;p&gt;根据&lt;a href=&#34;https://docs.djangoproject.com/en/2.0/topics/http/urls/#path-converters&#34;&gt;Django文档&lt;/a&gt;描述，str不匹配&lt;code&gt;/&lt;/code&gt;而path匹配&lt;code&gt;/&lt;/code&gt;，意味着当使用&lt;code&gt;&amp;lt;path:filename&amp;gt;&lt;/code&gt;的时候我们还是可以传进去&lt;code&gt;../&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;测试一下&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;path(&#39;download/&amp;lt;path:filename&amp;gt;&#39;, views.file_download),&lt;/code&gt;的情况&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-1252261399.cos-website.ap-beijing.myqcloud.com/images/KkoFJ&#34; alt=&#34;path&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;path(&#39;download/&amp;lt;str:filename&amp;gt;&#39;, views.file_download),&lt;/code&gt;的情况&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://ob5vt1k7f.qnssl.com/EQBtS&#34; alt=&#34;str&#34; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到当我们定义url的时候如果使用了&lt;code&gt;&amp;lt;path:filename&amp;gt;&lt;/code&gt;的形式，传入的包含&lt;code&gt;/&lt;/code&gt;的参数会被原样接收，当作完整参数交给路由部分处理，而定义为&lt;code&gt;&amp;lt;str:filename&amp;gt;&lt;/code&gt;(默认即为str)的时候，&lt;code&gt;/&lt;/code&gt;不被后端接收，这时候&lt;code&gt;xx.com/download/../1/1.txt&lt;/code&gt;这种路径下浏览器就根据url往上跳一级，也就是&lt;code&gt;xx.com/1/1.txt&lt;/code&gt;，django收到了的请求也是如此，于是django抛出一个找不到对应页面的异常&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://ob5vt1k7f.qnssl.com/bZQdj&#34; alt=&#34;404&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Django2.0的url虽然更改了写法，但依然向老版本兼容，兼容的办法就是用&lt;code&gt;re_path()&lt;/code&gt;方法代替&lt;code&gt;path()&lt;/code&gt;方法&lt;/p&gt;

&lt;p&gt;&lt;code&gt;re_path(&#39;download/(?P&amp;lt;filename&amp;gt;.+)&#39;, views.file_download),&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个匹配方式和1.8版本中&lt;code&gt;url(r&#39;^download/(.+)$&#39;, &amp;quot;mysite.views.file_download&amp;quot;),&lt;/code&gt;的意思是一样的，只是写法不同&lt;/p&gt;

&lt;p&gt;我们知道任何一种路由写法在经过django的urls模块相关方法处理之后都会转换为正则表达式进行匹配，之所以几种方式匹配结果不一样是因为处理完成后生成的正则不一样，把url路由转换为正则表达式的过程只会在django启动的时候编译一次，接收到的任何url形式都会根据生成的正则来路由到views定义的相关方法，urls模块就不用每次都去处理用户传递的url。&lt;/p&gt;

&lt;h3 id=&#34;0x03-断点分析&#34;&gt;0x03 断点分析&lt;/h3&gt;

&lt;p&gt;我们从代码层面来看一下这几者的区别&lt;/p&gt;

&lt;h5 id=&#34;1-re-path-download-p-filename-方式&#34;&gt;1.&lt;code&gt;re_path(&#39;download/(?P&amp;lt;filename&amp;gt;.+)&#39;&lt;/code&gt;方式&lt;/h5&gt;

&lt;p&gt;在&lt;code&gt;/Lib/site-packages/django/urls/conf.py&lt;/code&gt;中定义了相关方法&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-1252261399.cos-website.ap-beijing.myqcloud.com/images/uPvF8&#34; alt=&#34;re_path()&#34; /&gt;
&lt;code&gt;partial()&lt;/code&gt;方法的作用就是把一个函数作为另一个函数的参数传入，这里就是把&lt;code&gt;RegexPattern()&lt;/code&gt;类作为参数传进&lt;code&gt;_path()&lt;/code&gt;方法，因为在下面第70行&lt;code&gt;RegexPattern()&lt;/code&gt;就作为处理&lt;code&gt;re_path()&lt;/code&gt;时的方法&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pattern = Pattern(route, name=name, is_endpoint=True)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;跟入&lt;code&gt;RegexPattern()&lt;/code&gt;类 &lt;code&gt;/Lib/site-packages/django/urls/resolvers.py:136&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;构造方法之后regex就确定为我们定义的表达式，也就是&lt;code&gt;&#39;download/(?P&amp;lt;filename&amp;gt;.+)&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-1252261399.cos-website.ap-beijing.myqcloud.com/images/4dWIr&#34; alt=&#34;regex&#34; /&gt;
这种情况下是可以匹配任何字符串的，起不到防护目录穿越的作用&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-1252261399.cos-website.ap-beijing.myqcloud.com/images/cEbp5&#34; alt=&#34;regex&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;2-path-download-path-filename-方式&#34;&gt;2. &lt;code&gt;path(&#39;download/&amp;lt;path:filename&amp;gt;&#39;&lt;/code&gt;方式&lt;/h5&gt;

&lt;p&gt;同样的，第一步还是进入到&lt;code&gt;/Lib/site-packages/django/urls/conf.py&lt;/code&gt;，处理&lt;code&gt;path()&lt;/code&gt;相关的就交给&lt;code&gt;RoutePattern()&lt;/code&gt;类&lt;/p&gt;

&lt;p&gt;&lt;code&gt;path = partial(_path, Pattern=RoutePattern)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;跟入&lt;code&gt;RoutePattern()&lt;/code&gt;类  &lt;code&gt;/Lib/site-packages/django/urls/resolvers.py:234&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;初始化过程中进行了route转换成regex的操作&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def __init__(self, route, name=None, is_endpoint=False):
    self._route = route
    self._regex_dict = {}
    self._is_endpoint = is_endpoint
    self.name = name
    self.converters = _route_to_regex(str(route), is_endpoint)[1]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;跟入&lt;code&gt;_route_to_regex()&lt;/code&gt;方法，&lt;code&gt;/Lib/site-packages/django/urls/resolvers.py:194&lt;/code&gt;，看到该方法描述的功能就是将路径模式转换为正则表达式。&lt;/p&gt;

&lt;p&gt;首先对我们的&amp;rdquo;路由&amp;rdquo;通过&lt;code&gt;_PATH_PARAMETER_COMPONENT_RE()&lt;/code&gt;方法使用正则进行分割，&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;_PATH_PARAMETER_COMPONENT_RE = re.compile(
    r&#39;&amp;lt;(?:(?P&amp;lt;converter&amp;gt;[^&amp;gt;:]+):)?(?P&amp;lt;parameter&amp;gt;\w+)&amp;gt;&#39;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;取出&lt;code&gt;converter&lt;/code&gt;部分，也就是我们指定的&lt;code&gt;path&lt;/code&gt;，然后判断如果&lt;code&gt;converter&lt;/code&gt;为空的话就赋值为&amp;rsquo;str&amp;rsquo;，这也就是为什么我们不指定路径转换器时默认是str的原因。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-1252261399.cos-website.ap-beijing.myqcloud.com/images/2Yr3G&#34; alt=&#34;converter&#34; /&gt;
&lt;img src=&#34;https://blog-1252261399.cos-website.ap-beijing.myqcloud.com/images/rMvhH&#34; alt=&#34;path&#34; /&gt;&lt;/p&gt;

&lt;p&gt;接下来对转换器部分的操作&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:
    converter = get_converter(raw_converter)
except KeyError as e:
    raise ImproperlyConfigured(
        &amp;quot;URL route &#39;%s&#39; uses invalid converter %s.&amp;quot; % (original_route, e)
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;跟入&lt;code&gt;get_converter()&lt;/code&gt;方法，&lt;code&gt;/Lib/site-packages/django/urls/converters.py:69&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;最后调用的是&lt;code&gt;get_converters()&lt;/code&gt;，看到该方法里面定义了一些默认属性，这些属性的值在这个文件上方定义，
这里我们看到定义了文档中提到的5种路径转换器&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;DEFAULT_CONVERTERS = {
    &#39;int&#39;: IntConverter(),
    &#39;path&#39;: PathConverter(),
    &#39;slug&#39;: SlugConverter(),
    &#39;str&#39;: StringConverter(),
    &#39;uuid&#39;: UUIDConverter(),
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;相对应的regex值也就在这里被定义&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-1252261399.cos-website.ap-beijing.myqcloud.com/images/cft5C&#34; alt=&#34;default_regex&#34; /&gt;
于是在&lt;code&gt;decorating_function()&lt;/code&gt;通过&lt;code&gt;cache_get()&lt;/code&gt;方法取到了这些转换器对应的表达式，最后进行了拼接&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-1252261399.cos-website.ap-beijing.myqcloud.com/images/vUIRy&#34; alt=&#34;Untitled Image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;通过&lt;code&gt;parts.append&lt;/code&gt;拼接
&lt;code&gt;parts.append(&#39;(?P&amp;lt;&#39; + parameter + &#39;&amp;gt;&#39; + converter.regex + &#39;)&#39;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;此时的&amp;rsquo;parameter&amp;rsquo;值即为&amp;rsquo;filename&amp;rsquo;，regex值为converter对象的属性，也就是&lt;code&gt;&#39;.+&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-1252261399.cos-website.ap-beijing.myqcloud.com/images/I6I4E&#34; alt=&#34;regex&#34; /&gt;&lt;/p&gt;

&lt;p&gt;最后拼接成的正则表达式为&lt;code&gt;&#39;^download\\/(?P&amp;lt;filename&amp;gt;.+)$&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;与我们使用&lt;code&gt;re_path()&lt;/code&gt;时的表达式是一样的，所以也能匹配到&lt;code&gt;../&lt;/code&gt;之类的字符串，依旧起不到防止目录穿越的作用&lt;/p&gt;

&lt;h5 id=&#34;3-path-download-str-filename-方式&#34;&gt;3. &lt;code&gt;path(&#39;download/&amp;lt;str:filename&amp;gt;&#39;&lt;/code&gt;方式&lt;/h5&gt;

&lt;p&gt;接下来看&lt;code&gt;path(&#39;download/&amp;lt;str:filename&amp;gt;&#39;&lt;/code&gt;方式，不指定converter时&lt;code&gt;path(&#39;download/&amp;lt;filename&amp;gt;&#39;&lt;/code&gt;默认的就是这种方式&lt;/p&gt;

&lt;p&gt;同样跟入到&lt;code&gt;RoutePattern()&lt;/code&gt;类  &lt;code&gt;/Lib/site-packages/django/urls/resolvers.py:234&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;流程跟上面指定&lt;code&gt;path&lt;/code&gt;的方式一样，&lt;code&gt;converter&lt;/code&gt;为空时设置为&amp;rsquo;str&amp;rsquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-1252261399.cos-website.ap-beijing.myqcloud.com/images/LKW7J&#34; alt=&#34;str&#34; /&gt;&lt;/p&gt;

&lt;p&gt;此时对应的regex值为&lt;code&gt;&#39;[^/]+&#39;&lt;/code&gt;，也就是不匹配&lt;code&gt;&#39;/&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://ob5vt1k7f.qnssl.com/iVQBV&#34; alt=&#34;cache&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://ob5vt1k7f.qnssl.com/prryr&#34; alt=&#34;converter&#34; /&gt;
最终拼接成的正则为&lt;code&gt;&#39;^download\\/(?P&amp;lt;filename&amp;gt;[^/]+)$&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这种情况下由于不匹配&lt;code&gt;/&lt;/code&gt;我们就无法传入&lt;code&gt;../&lt;/code&gt;之类的字符串，也就不能穿越目录&lt;/p&gt;

&lt;h4 id=&#34;流程图&#34;&gt;流程图&lt;/h4&gt;

&lt;p&gt;画了一张简单的流程图方便理解上述三种情况&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog-1252261399.cos-website.ap-beijing.myqcloud.com/images/t5Tay&#34; alt=&#34;process&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;0x04-如何避免-正确的代码&#34;&gt;0x04 如何避免&amp;amp;正确的代码&lt;/h3&gt;

&lt;p&gt;把django处理url的各种情况理清了之后可能有同学会问，是不是以后都用&lt;code&gt;path(&#39;download/&amp;lt;str:filename&amp;gt;&#39;&lt;/code&gt;的方式就能避免目录穿越呢？实际上是不建议这样的，我们不能把风险点由存在缺陷的代码处转移到依赖框架上面，主要原因有二&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;我们无法确保每次写url传递规则的时候不出错，特别是项目庞大之后为了兼顾功能而忽略一些安全隐患点；&lt;/li&gt;
&lt;li&gt;存在缺陷的代码不能就这样放着，因为无法保证在别处不会调用这块代码，必须把风险点从根本上消除。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;回到代码脆弱性本身，如何从根源处消除目录遍历漏洞呢？
一个想法是限定basedir，并递归过滤任何&lt;code&gt;../&lt;/code&gt;之类的字符串，当然也要考虑经过url encode之后的路径，另一个简单的方法是使用&lt;code&gt;os.path.basename()&lt;/code&gt;方法，这个方法会忽略前面的路径只取到文件名，可以杜绝此类漏洞。&lt;/p&gt;

&lt;h3 id=&#34;0x05-总结&#34;&gt;0x05 总结&lt;/h3&gt;

&lt;p&gt;本文从目录遍历漏洞入手，分析了django框架处理url传递的逻辑，以及如何正确控制风险点避免出现问题代码，遵循的原则就是不要相信用户的输入，严格控制每一个参数。&lt;/p&gt;

&lt;p&gt;感谢阅读，有任何不足之处欢迎指正。&lt;/p&gt;

&lt;p&gt;参考:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/2.0/topics/http/urls/&#34;&gt;https://docs.djangoproject.com/en/2.0/topics/http/urls/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.lijiejie.com/python-django-directory-traversal/&#34;&gt;http://www.lijiejie.com/python-django-directory-traversal/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.leavesongs.com/PENETRATION/arbitrary-files-read-via-static-requests.html&#34;&gt;https://www.leavesongs.com/PENETRATION/arbitrary-files-read-via-static-requests.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script&gt;pangu.spacingPage();&lt;/script&gt;
</description>
    </item>
    
  </channel>
</rss>